@use "sass:math";
@use "sass:list";
@use "sass:map";
@use "sass:color";

@use "../../abstracts/tokens";

//################################################################################################################
//
//   UTILITIES FUNCTIONS
//
//################################################################################################################

//===============================================================================================================
// Grid functions
//===============================================================================================================

//------------------------------------------------------------------------------------------
// Get break point
//------------------------------------------------------------------------------------------
@function get-bp($bp-name, $tokens:tokens.$tokens) {

  @if ($tokens) {

    // VAR: Get Breakpoints
    $breakpoints: map.get($tokens,"breakpoints");

    @if (map-has-key($breakpoints, $bp-name)) {

      // Get breakpoint map
      $bp-map: map-get($breakpoints, $bp-name);

      // Get breakpoint size
      $bp-size: map-get($bp-map, "breakpoint");
      
      @return $bp-size;
    }

    @else {
      @warn 'PARAMETER ERROR: Function get-bp: $bp-name "#{$bp-name}" not found';
      @return false;
    }
  }@else {
    @warn 'Function get-bp: breakpoints array is not defined.';
    @return false;
  }

}

//===============================================================================================================
// Misc functions
//===============================================================================================================

//------------------------------------------------------------------------------------------
// Get Token
//------------------------------------------------------------------------------------------
@function get-token-deep($map, $keys...) {
  @if(type-of($map == map)){
    @each $key in $keys {
      @if map-has-key($map, $key) {
        $map: map-get($map, $key);
      }@else{
        @warn 'PARAMETER ERROR: The get-token function got a non existent key #{$key}.';
      }
    }
    @return $map;
  }@else{
    @warn 'PARAMETER ERROR: The get-token function got a non-map variable.';
  }
}

@function get-token($token-name...) {
  // VAR: Get token map
  $search-token: get-token-deep(tokens.$tokens, $token-name...);

  @if($search-token and (type-of($search-token) == map or type-of($search-token) == list)){
    @warn 'PARAMETER ERROR: The get-token function should return only flat values, but a #{type-of($search-token)} was returned.';
    @return false;
  }@else{
    @if($search-token){
      @return $search-token;
    }@else{
      @warn 'PARAMETER ERROR: Function get-token: $token-name "#{$token-name}" not found';
      @return false;
    }
  }
}

@function get-color($color-path...){
  $full-color-path: join('color', $color-path);
  $color-token: get-token($full-color-path...);
  @return $color-token;
}

@function get-color-var($color-path...){
  $path: '--color';
  @each $color in $color-path{
      $path: $path + '-' + $color
  }
  @return var(unquote($path));
}

//################################################################################################################
//
//   CONFIGS HELPER FUNCTIONS
//
//################################################################################################################

//----------------------------------------------------------------------------
//  Generate column values array
//----------------------------------------------------------------------------
@function generate-col-values($cols-num) {
  $cols: ();

  @for $i from 1 through $cols-num {
    $col-value: percentage(calc($i/$cols-num));
    $cols: map.set($cols, "#{$i}", $col-value);
  }

  @return $cols;
}

//################################################################################################################
//
//   GENERATOR SPECIFIC FUNCTIONS
//
//################################################################################################################

//===============================================================================================================
//  Map functions
//===============================================================================================================

//----------------------------------------------------------------------------
//  Merge maps
//----------------------------------------------------------------------------
@function map-collect($maps...) {
  $collection: ();

  @each $map in $maps {
    $collection: map-merge($collection, $map);
  }
  @return $collection;
}

//----------------------------------------------------------------------------
//  Map deep get - map-deep-get($tokens, "size", "base")
//----------------------------------------------------------------------------
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

//----------------------------------------------------------------------------
//  Map deep set - map-deep-get($tokens, "size", "base", 300)
//----------------------------------------------------------------------------
@function map-deep-set($map, $keys, $value) {
  $maps: ($map,);
  $result: null;
  
  // If the last key is a map already
  // Warn the user we will be overriding it with $value
  @if type-of(nth($keys, -1)) == "map" {
    @warn "The last key you specified is a map; it will be overrided with `#{$value}`.";
  }
  
  // If $keys is a single key
  // Just merge and return
  @if length($keys) == 1 {
    @return map-merge($map, ($keys: $value));
  }
  
  // Loop from the first to the second to last key from $keys
  // Store the associated map to this key in the $maps list
  // If the key doesn't exist, throw an error
  @for $i from 1 through length($keys) - 1 {
    $current-key: nth($keys, $i);
    $current-map: nth($maps, -1);
    $current-get: map-get($current-map, $current-key);
    @if $current-get == null {
      @error "Key `#{$key}` doesn't exist at current level in map.";
    }
    $maps: append($maps, $current-get);
  }
  
  // Loop from the last map to the first one
  // Merge it with the previous one
  @for $i from length($maps) through 1 {
    $current-map: nth($maps, $i);
    $current-key: nth($keys, $i);
    $current-val: if($i == length($maps), $value, $result);
    $result: map-merge($current-map, ($current-key: $current-val));
  }
  
  // Return result
  @return $result;
}

//----------------------------------------------------------------------------
//  Filter flat map
//----------------------------------------------------------------------------
@function filter-token-map($map, $filter, $remove:true){
  $return-map:();

  @if(type-of($map)=="map"){
    @each $key, $value in $map{
      @if(str-index($key, $filter) == 1){
        @if($remove != false){
          $return-map: map.set($return-map, str-replace($key, $filter), $value);
        }@else{
          $return-map: map.set($return-map, $key, $value);
        }
      }
    }
  }
  
  @return $return-map;
}

//----------------------------------------------------------------------------
//  Flat CTI map - To deal with Style Dictionary "map-deep"
//----------------------------------------------------------------------------
@function map-flatten-cti($map, $sub-array...) {

  $entry-point: map-deep-get($map, $sub-array...);

  $cti-values: ();

  @if(type-of($entry-point) == map){
    @each $category-name, $category-value in $entry-point{
      @if(type-of($category-value) == map){
        @each $type-name, $type-value in $category-value{
          @if(type-of($type-value) == map){
            @each $item-name, $item-value in $type-value{
              @if(type-of($item-value) == map){
                @each $subitem-name, $subitem-value in $item-value{
                  $cti-values: map.set($cti-values, #{$category-name}#{"-"}#{$type-name}#{"-"}#{$item-name}#{"-"}#{$subitem-name}, $item-value)
                }
              }@else{
                $cti-values: map.set($cti-values, #{$category-name}#{"-"}#{$type-name}#{"-"}#{$item-name}, $item-value)
              }
            }
          }@else{
            $cti-values: map.set($cti-values, #{$category-name}#{"-"}#{$type-name}, $type-value)
          }
        }
      }@else{
        $cti-values: map.set($cti-values, $category-name, $category-value)
      }
    }
    @return $cti-values;
  }@else{
    @warn 'NO MAP PROVIDED: map-flatten-cti -> No map provided, or sub map key "#{$sub-array}" not found';
    @return false;
  }
  
}


//===============================================================================================================
//  List functions
//===============================================================================================================

//----------------------------------------------------------------------------
//  Map to list
//----------------------------------------------------------------------------
@function to-list($value, $keep: 'both') {
  $keep: if(index('keys' 'values', $keep), $keep, 'both');

  @if type-of($value) == 'map' {
    $keys: ();
    $values: ();

    @each $key, $val in $value {
      $keys: append($keys, $key);
      $values: append($values, $val);
    }

    @if $keep == 'keys' {
      @return $keys;
    } @else if $keep == 'values' {
      @return $values;
    } @else {
      @return zip($keys, $values);
    }
  }

  @return if(type-of($value) != 'list', ($value,), $value);
}

//===============================================================================================================
//  String functions
//===============================================================================================================

//----------------------------------------------------------------------------
//  String replace function
//----------------------------------------------------------------------------
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1)+$replace+str-replace(str-slice($string, $index + str-length($search)),
      $search,
      $replace);
  }

  @return $string;
}

//----------------------------------------------------------------------------
//  Sanitize slashes and dots (example: "w-0.5" or "w-2/6") if needed
//----------------------------------------------------------------------------
@function sanitize-string($string) {
  $sanitize-dots: str-replace($string, ".", "\\.");
  $sanitize-slashes: str-replace($sanitize-dots, "/", "\\/");
  @return $sanitize-slashes;
}

//----------------------------------------------------------------------------
//  Remove quotes if string
//----------------------------------------------------------------------------
@function unquotify($value) {
  @if(type-of($value) == string){
    @return unquote($value);
  }@else{
    @return $value;
  }
}

//----------------------------------------------------------------------------
//  String Split
//----------------------------------------------------------------------------
@function split-str($string, $separator) {
  // empty array/list
  $split-arr: ();
  // first index of separator in string
  $index : str-index($string, $separator);
  // loop through string
  @while $index != null {
      // get the substring from the first character to the separator
      $item: str-slice($string, 1, $index - 1);
      // push item to array
      $split-arr: append($split-arr, $item);
      // remove item and separator from string
      $string: str-slice($string, $index + 1);
      // find new index of separator
      $index : str-index($string, $separator);
  }
  // add the remaining string to list (the last item)
  @if($string != ""){
    $split-arr: append($split-arr, $string);
  }
  
  @return $split-arr;
};

//===============================================================================================================
//  Misc Functions
//===============================================================================================================

//------------------------------------------------------------------------------------------
// To number
//------------------------------------------------------------------------------------------
@function to-number($value) {
  @if type-of($value) == "number" {
    @return $value;
  } @else if type-of($value) != "string" {
    @error 'Value for `to-number` should be a number or a string.';
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == "-";
  $numbers: (
    "0": 0,
    "1": 1,
    "2": 2,
    "3": 3,
    "4": 4,
    "5": 5,
    "6": 6,
    "7": 7,
    "8": 8,
    "9": 9,
  );

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if (index(map-keys($numbers), $character) or $character == ".") {
      @if $character == "." {
        $digits: 1;
      } @else if $digits == 0 {
        $result: $result * 10 + map-get($numbers, $character);
      } @else {
        $digits: $digits * 10;
        $result: $result + map-get($numbers, $character) / $digits;
      }
    }
  }

  @return if($minus, -$result, $result);
}

//----------------------------------------------------------------------------
//  Turn values to negative
//----------------------------------------------------------------------------
@function turn-to-negative($values-map) {
  $map-return:();
  @each $property, $value in $values-map{
    @if(type-of($value) == 'number' and $value > 0){
      $map-return: map.set($map-return, $property, #{-$value});
    }
  }
  @return $map-return;
};

//----------------------------------------------------------------------------
//  Return opacity added colors
//----------------------------------------------------------------------------
@function add-opacity($values-map, $opacity:0.5) {
  $map-return:();
  $opacity: 1 - $opacity;
  @each $property, $value in $values-map{
    @if(type-of($value) == color){
      $map-return: map.set($map-return, $property, #{color.adjust($value, $alpha: -$opacity)});
    }
  }
  @return $map-return;
};